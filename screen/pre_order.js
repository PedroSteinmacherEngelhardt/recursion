class PreOrder extends Blocks {
    setup() {
        this.blocks.push(new FunctionBlock(500, 200, 20, 50, "contador(i)", true, () => print('hey')));
        this.mainBlock = this.blocks[0]
        this.blocks.push(new LoopBlock(500, 400, 20, 50, "loop(node in nodes)", true, (i) => print(i), (i) => i.neighbors));
        this.blocks.push(new BaseBlock(1200, 400, 20, 50, "contador(node)", true, (i) => this.recursionPart(circles[i])));


        circles = {}
        Object.entries(graph).forEach(([key, value]) => {
            circles[key] = {
                i: value.i,
                pos: createVector(value.pos.x, value.pos.y),
                velocity: createVector(0, 0),
                neighbors: value.neighbors
            }
        });

        super.setup(true)

        this.actionButton.mousePressed(() => {
            this.iterations = 0
            this.recursionPart(circles["0"]);
        });

        setDialog(this.dialog)
    }

    draw() {
        super.draw()
    }

    async recursionPart(i) {
        selected = i
        await sleep(500);

        await this.repaint(i);

    }

    dialog = [
        ` <p>üå≥ <strong>Mentor Virtual</strong>: Ol√°, jogador! Hoje vamos aprender sobre como <strong>navegar em uma √°rvore</strong>, um tipo especial de estrutura de dados que aparece em muitos problemas de programa√ß√£o. Pronto para a miss√£o? üöÄ</p>
    
        <h3>O que √© uma √°rvore?</h3>
        <p>Uma √°rvore √© uma estrutura hier√°rquica que organiza dados como n√≥s conectados por arestas. Cada n√≥ pode ter "filhos" (outros n√≥s) e um √∫nico "pai" (exceto o n√≥ raiz, que √© o topo da √°rvore).</p>
        
        <p><strong>Exemplo:</strong> Pense em uma √°rvore geneal√≥gica, onde cada pessoa √© um n√≥, conectada aos seus descendentes e ascendentes.</p>
        
        <h3>Como navegamos em uma √°rvore?</h3>
        <p>Para navegar (ou percorrer) uma √°rvore, usamos algoritmos que seguem padr√µes espec√≠ficos. Os principais tipos de travessia s√£o:</p>
        <ul>
            <li><strong>Pr√©-ordem (Pre-order):</strong> Visitamos o n√≥ atual primeiro, depois seus filhos.</li>
            <li><strong>Em ordem (In-order):</strong> Visitamos o filho esquerdo, depois o n√≥ atual, e ent√£o o filho direito. (Usado em √°rvores bin√°rias.)</li>
            <li><strong>P√≥s-ordem (Post-order):</strong> Visitamos os filhos primeiro e o n√≥ atual por √∫ltimo.</li>
            <li><strong>Largura (Breadth-First):</strong> Exploramos todos os n√≥s em cada n√≠vel antes de passar para o pr√≥ximo n√≠vel.</li>
        </ul>`,
        `<h3>Como funciona no jogo?</h3>
        <p>No nosso jogo, voc√™ controlar√° a navega√ß√£o por uma √°rvore! Sua miss√£o √© criar uma fun√ß√£o que visite cada n√≥ de forma recursiva ou usando loops. Vamos simplificar:</p>
        <ol>
            <li>Comece no n√≥ raiz (o topo da √°rvore).</li>
            <li>Siga as conex√µes para visitar cada n√≥ filho.</li>
            <li>Use recurs√£o para explorar todos os n√≥s filhos de forma autom√°tica.</li>
            <li>Registre cada n√≥ visitado (ou execute uma a√ß√£o nele).</li>
        </ol>
        
        <h3>Exemplo de travessia:</h3>
        <p>Imagine que voc√™ quer contar todos os n√≥s de uma √°rvore:</p>
        <ol>
            <li>Comece no n√≥ raiz e marque como "visitado".</li>
            <li>Para cada n√≥ filho, repita o processo.</li>
            <li>Use recurs√£o para explorar todos os n√≠veis.</li>
        </ol>
        
        <p>Isso permite que voc√™ explore a √°rvore inteira sem perder nenhum n√≥!</p>
        
        <h3>Por que aprender isso?</h3>
        <p>A navega√ß√£o em √°rvores √© √∫til para resolver muitos problemas, como:</p>
        <ul>
            <li><strong>Busca:</strong> Encontrar um valor espec√≠fico.</li>
            <li><strong>Organiza√ß√£o:</strong> Como √°rvores de diret√≥rios no computador.</li>
            <li><strong>An√°lise de dados:</strong> Estruturas como √°rvores de decis√£o.</li>
        </ul>
        
        <h3>Sua Miss√£o:</h3>
        <p>Monte um algoritmo para navegar na √°rvore do nosso jogo. Escolha o tipo de travessia pr√©-ordem e explore todos os n√≥s!</p>`
    ]

}

