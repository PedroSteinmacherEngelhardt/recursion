class Fibonacci extends Blocks {
    setup() {
        this.blocks.push(new FunctionBlock(500, 200, 20, 50, "fibonacci(n)", true, () => print('hey')));
        this.mainBlock = this.blocks[0]
        this.blocks.push(new CondicionalBlock(500, 400, 20, 70, "if", true, () => "if"));
        this.blocks.push(new ReturnBlock(500, 400, 20, 70, "return", true, () => "return"));
        this.blocks.push(new ReturnBlock(500, 400, 20, 70, "return", true, () => "return"));
        this.blocks.push(new BaseBlock(900, 400, 20, 50, "n <= 1", true, (n) => n.n <= 1));
        this.blocks.push(new BaseBlock(1200, 400, 20, 50, "fibonacci(n - 1) + fibonacci(n - 2)", true, (params) => this.fibonacci(params)));
        this.blocks.push(new BaseBlock(900, 400, 20, 50, "n", true, (n) => n.n));

        /* this.blocks[0].drop(this.blocks[1])
        this.blocks[1].drop(this.blocks[4])
        this.blocks[1].drop(this.blocks[2])
        this.blocks[2].drop(this.blocks[6])
        this.blocks[0].drop(this.blocks[3])
        this.blocks[3].drop(this.blocks[5]) */

        super.setup(true)

        this.actionButton.mousePressed(async () => {
            this.iterations = 0
            circles = {};

            let x = await this.repaint({ n: 8, x: cnvSize.width / 2, y: cnvSize.height / 2 })

            print(x);
        });

        setDialog(this.dialog)
    }

    draw() {
        super.draw()
    }

    async fibonacci(T) {
        const uuid = generateUUID()
        circles[uuid] = {
            i: 0,
            pos: createVector(T.x, T.y),
            velocity: createVector(0, 0),
            x: T.x,
            y: T.y,
            neighbors: [],
            hide: true
        }

        let value = await this.recursionPart({ n: T.n - 1, x: T.x - 70, y: T.y - 100, parent: uuid }) + await this.recursionPart({ n: T.n - 2, x: T.x + 70, y: T.y - 100, parent: uuid })

        circles[uuid].hide = false
        circles[uuid].i = value
        if (T.parent) {
            circles[uuid].parent = T.parent
        }
        if (circles[T.parent]) {
            circles[T.parent].neighbors.push(uuid)
        }

        await sleep(100)

        return value
    }

    recursionPart(params) {
        let value = this.repaint(params);
        return value
    }

    dialog = [
        `<h3>O que √© a sequ√™ncia de Fibonacci?</h3>
    <p>A sequ√™ncia de Fibonacci √© uma s√©rie de n√∫meros onde cada n√∫mero √© a soma dos dois anteriores. Ela come√ßa assim:</p>
    <p><strong>0, 1, 1, 2, 3, 5, 8, 13, 21, 34...</strong></p>
    
    <p>Veja como funciona:</p>
    <ul>
        <li>Os dois primeiros n√∫meros s√£o sempre <strong>0</strong> e <strong>1</strong>.</li>
        <li>A partir do terceiro n√∫mero, basta somar os dois n√∫meros anteriores para obter o pr√≥ximo valor.</li>
    </ul>
    
    <p><em>Exemplo:</em></p>
    <ul>
        <li><code>0 + 1 = 1</code> (terceiro n√∫mero)</li>
        <li><code>1 + 1 = 2</code> (quarto n√∫mero)</li>
        <li><code>1 + 2 = 3</code> (quinto n√∫mero)</li>
        <li><code>2 + 3 = 5</code> (sexto n√∫mero)</li>
    </ul>`,
        `<h3>Como calcular Fibonacci com recurs√£o?</h3>
    <p>Fun√ß√µes recursivas s√£o perfeitas para resolver Fibonacci, porque a defini√ß√£o da sequ√™ncia √© baseada na repeti√ß√£o de um mesmo c√°lculo:</p>
    <ol>
        <li><strong>Passo base (condi√ß√£o de sa√≠da):</strong>  
            <ul>
                <li>Se o n√∫mero for 0 ou 1, o resultado √© o pr√≥prio n√∫mero.</li>
                <li><code>F(0) = 0</code> e <code>F(1) = 1</code></li>
            </ul>
        </li>
        <li><strong>Passo recursivo:</strong>  
            <ul>
                <li>Para calcular o en√©simo n√∫mero da sequ√™ncia, somamos os dois n√∫meros anteriores:</li>
                <li><code>F(n) = F(n-1) + F(n-2)</code></li>
            </ul>
        </li>
    </ol>`,
        ` <h3>Por que Fibonacci √© t√£o especial?</h3>
    <p>A sequ√™ncia de Fibonacci aparece em v√°rios lugares na natureza e na matem√°tica, como:</p>
    <ul>
        <li><strong>Padr√µes naturais:</strong> A disposi√ß√£o das p√©talas de flores, sementes de girass√≥is e pinhas.</li>
        <li><strong>Propor√ß√£o √°urea:</strong> A rela√ß√£o entre n√∫meros consecutivos da sequ√™ncia se aproxima da propor√ß√£o √°urea (1.618...), famosa em arte e design.</li>
        <li><strong>Divis√µes de problemas:</strong> Fibonacci √© usado em algoritmos e na computa√ß√£o.</li>
    </ul>
    
    <h3>Sua Miss√£o:</h3>
    <p>Nessa fase, voc√™ deve usar blocos de c√≥digo para criar uma fun√ß√£o recursiva que calcule o n-√©simo n√∫mero de Fibonacci. N√£o se esque√ßa:</p>
    <ul>
        <li>Defina uma <strong>condi√ß√£o de sa√≠da</strong> para os casos <code>F(0)</code> e <code>F(1)</code>.</li>
        <li>Garanta que a fun√ß√£o chame a si mesma com os valores <code>n-1</code> e <code>n-2</code> e some os resultados.</li>
    </ul>
    
    <p>Quando estiver pronto, clique em <strong>‚ÄúExecutar Fun√ß√£o‚Äù</strong> para ver o processo sendo visualizado na √°rvore de execu√ß√£o. üöÄ</p>
`,
    ]

}