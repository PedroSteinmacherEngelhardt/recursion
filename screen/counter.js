class Counter extends Blocks {
    setup() {
        this.blocks.push(new FunctionBlock(500, 200, 20, 50, "contador(i)", true, () => print('hey')));
        this.mainBlock = this.blocks[0]
        this.blocks.push(new CondicionalBlock(500, 400, 20, 70, "if", true, () => "if"));
        this.blocks.push(new BaseBlock(900, 400, 20, 50, "i <= 10", true, (i) => i <= 10));
        this.blocks.push(new BaseBlock(1200, 400, 20, 50, "contador(i + 1)", true, (i) => this.recursionPart(i)));

        super.setup(true)

        this.actionButton.mousePressed(() => {
            this.iterations = 0
            circles = {}; this.repaint(0);
        });

        setDialog(this.dialog)
    }

    draw() {
        super.draw()
    }

    async recursionPart(i) {
        const circleLenght = Object.keys(circles).length
        const Xoffset = cnvSize.width / 2
        circles[i] = {
            pos: createVector(Xoffset + 1 * circleLenght, 170 * circleLenght + 20),
            i: i,
            velocity: createVector(0, 0),
            neighbors: []
        }
        if (circles[i - 1]) {
            circles[i - 1].neighbors.push(i)
        }
        circles[i].parent = i - 1
        await sleep(350);
        this.repaint(i + 1);
    }

    dialog = [
        ` <p>Ol√°, jogador! Bem-vindo ao fant√°stico mundo da <strong>recurs√£o</strong>! üéâ</p>
            <p>Hoje vamos aprender sobre fun√ß√µes recursivas e como us√°-las para resolver problemas. Antes de come√ßar sua miss√£o, vou explicar o que elas s√£o, como funcionam e por que s√£o t√£o √∫teis.</p>
            
            <h3>O que √© uma fun√ß√£o recursiva?</h3>
            <p>Uma <strong>fun√ß√£o recursiva</strong> √© uma fun√ß√£o que <em>se chama a si mesma</em> enquanto resolve partes menores de um problema maior. Imagine um quebra-cabe√ßa grande que voc√™ resolve pe√ßa por pe√ßa at√© terminar.</p>
            `,
        `<h3>Para que servem fun√ß√µes recursivas?</h3>
            <p>Fun√ß√µes recursivas s√£o √≥timas para resolver problemas que podem ser divididos em partes menores e semelhantes. Alguns exemplos incluem:</p>
            <ul>
              <li><strong>Estruturas repetitivas:</strong> Contar n√∫meros ou repetir a√ß√µes.</li>
              <li><strong>Problemas hier√°rquicos:</strong> Explorar √°rvores geneal√≥gicas ou diret√≥rios no computador.</li>
              <li><strong>C√°lculos matem√°ticos:</strong> Como o fatorial de um n√∫mero (ex.: <code>5! = 5 √ó 4 √ó 3 √ó 2 √ó 1</code>).</li>
              <li><strong>Desafios complexos:</strong> Resolver labirintos ou encontrar o menor caminho entre dois pontos.</li>
            </ul>
      `,
        `<h2>Construindo um Contador Recursivo</h2>
    <p>
       Nesta etapa, voc√™ aprender√° como criar um algoritmo simples usando recurs√£o: um contador.
    </p>
    <p>
        Para completar esta fase, arraste os blocos dispon√≠veis e organize-os em ordem, um sobre o outro.
    </p>
    <ul>
        <li>Definir uma condi√ß√£o de sa√≠da (quando o contador deve parar).</li>
        <li>Fazer com que a fun√ß√£o chame a si mesma com um valor atualizado.</li>
    </ul>
    <p>
        O objetivo √© criar um contador que conte de um n√∫mero inicial at√© 10.
    </p>
    <p>
        Quando terminar, clique em <b>‚ÄòExecutar fun√ß√£o‚Äô</b> para ver o resultado na √°rvore interativa √† direita. Experimente ajustar o c√≥digo e observe como a execu√ß√£o muda!
    </p>
    `,
    ]

}

