function setup() {
  createCanvas(window.innerWidth, window.innerHeight);
  setScreen(new LevelSelector, false)
  angleMode(DEGREES)
}

let nodeX = 1200;
let nodeY = 400;

function draw() {
  if (currentScreen && currentScreen.draw)
    currentScreen.draw();
  return;
}

function mousePressed() {
  if (isInsedeDisplayCnv()) return
  if (currentScreen && currentScreen.mousePressed)
    currentScreen.mousePressed();
  return;
}

function touchStarted(event) {
  mousePressed()
}

function mouseDragged() {
  if (isInsedeDisplayCnv()) return
  if (currentScreen && currentScreen.mouseDragged)
    currentScreen.mouseDragged();
  return;
}

function touchMoved() {
  mouseDragged()
  return false
}

function mouseReleased() {
  if (isInsedeDisplayCnv()) return
  if (currentScreen && currentScreen.mouseReleased)
    currentScreen.mouseReleased();
  return;
}

function touchEnded() {
  mouseReleased()
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

const dialog = [
  ` <p>üéÆ <strong>Mentor Virtual</strong>: Ol√°, jogador! Bem-vindo ao fant√°stico mundo da <strong>recurs√£o</strong>! üéâ</p>
      <p>Hoje vamos aprender sobre fun√ß√µes recursivas e como us√°-las para resolver problemas. Antes de come√ßar sua miss√£o, vou explicar o que elas s√£o, como funcionam e por que s√£o t√£o √∫teis.</p>
      
      <h3>O que √© uma fun√ß√£o recursiva?</h3>
      <p>Uma <strong>fun√ß√£o recursiva</strong> √© uma fun√ß√£o que <em>se chama a si mesma</em> enquanto resolve partes menores de um problema maior. Imagine um quebra-cabe√ßa grande que voc√™ resolve pe√ßa por pe√ßa at√© terminar.</p>
      `,
  `<h3>Para que servem fun√ß√µes recursivas?</h3>
      <p>Fun√ß√µes recursivas s√£o √≥timas para resolver problemas que podem ser divididos em partes menores e semelhantes. Alguns exemplos incluem:</p>
      <ul>
        <li><strong>Estruturas repetitivas:</strong> Contar n√∫meros ou repetir a√ß√µes.</li>
        <li><strong>Problemas hier√°rquicos:</strong> Explorar √°rvores geneal√≥gicas ou diret√≥rios no computador.</li>
        <li><strong>C√°lculos matem√°ticos:</strong> Como o fatorial de um n√∫mero (ex.: <code>5! = 5 √ó 4 √ó 3 √ó 2 √ó 1</code>).</li>
        <li><strong>Desafios complexos:</strong> Resolver labirintos ou encontrar o menor caminho entre dois pontos.</li>
      </ul>
`,
]

let dialogIndex = 0

const dialogBox = document.getElementById('dialog')
const dialogContent = document.getElementById('dialogcontent')
dialogContent.innerHTML = dialog[dialogIndex]
dialogBox.style.cursor = 'pointer';

dialogBox.onmouseover = function () {
  if (!dialogIndex >= dialog.length - 1)
    this.style.backgroundColor = '#ddddddc0';
};
dialogBox.onmouseout = function () {
  this.style.backgroundColor = '';
};

function passDialog() {
  event.stopPropagation();
  if (dialogIndex + 1 > dialog.length - 1) {
    return
  }
  dialogIndex += 1
  dialogContent.innerHTML = dialog[dialogIndex]
}

function goBackDialog() {
  event.stopPropagation();
  if (dialogIndex - 1 < 0) {
    return
  }
  dialogIndex -= 1
  dialogContent.innerHTML = dialog[dialogIndex]
}